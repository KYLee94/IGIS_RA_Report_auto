# -*- coding: utf-8 -*-
"""IGIS_RA_주간업무보고 업데이트 자동화

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P5REaLeippt6jWf2BGcCk2w1Ui8si0g_
"""

# 1. 노션 클라이언트 라이브러리 설치
!pip install notion-client

# 2. 필요한 라이브러리 불러오기
import os
from notion_client import Client

# 3. Notion API 키 및 데이터베이스 ID 설정
# ---------------------------------------------------------------
# ⚠️ 중요: 아래 값들을 자신의 정보로 수정해주세요.
# ---------------------------------------------------------------

# GitHub Actions의 Secrets에서 정보 가져오기
NOTION_API_KEY = os.environ.get('NOTION_API_KEY')
MASTER_DB_ID = os.environ.get('MASTER_DB_ID')
# 쉼표로 구분된 문자열을 리스트로 변환
SOURCE_DB_IDS = os.environ.get('SOURCE_DB_IDS', '').split(',')

# 4. Notion 클라이언트 초기화
notion = Client(auth=NOTION_API_KEY)

# 5. 핵심 로직: 데이터베이스 동기화 함수
def sync_databases():
    print("🚀 데이터베이스 동기화를 시작합니다...")

     # --- 단계 0: 마스터 DB의 모든 항목 삭제 (초기화) ---
    print("\n🗑️ 마스터 데이터베이스 초기화를 시작합니다...")
    try:
        # 마스터 DB에서 이전에 동기화된 모든 페이지를 조회합니다.
        master_pages_to_delete = notion.databases.query(
            database_id=MASTER_DB_ID,
            filter={"property": "Project_Title", "rich_text": {"is_not_empty": True}}
        ).get("results")

        # 각 페이지를 '보관 처리'하여 삭제합니다.
        for page in master_pages_to_delete:
            page_id = page["id"]
            notion.pages.update(page_id=page_id, archived=True)

        print(f"  ✅ {len(master_pages_to_delete)}개의 기존 항목을 삭제(보관)했습니다.")

    except Exception as e:
        print(f"❌ 마스터 DB 초기화 중 오류 발생: {e}")
        return # 초기화에 실패하면 더 이상 진행하지 않고 함수를 종료합니다.

    # --- 단계 1: 마스터 DB에서 이미 동기화된 항목 ID 목록 가져오기 ---
    existing_source_ids = set()
    try:
        master_pages = notion.databases.query(database_id=MASTER_DB_ID).get("results")
        for page in master_pages:
            source_id_property = page.get("properties", {}).get("Source_ID", {})
            if source_id_property.get("rich_text"):
                existing_source_ids.add(source_id_property["rich_text"][0]["plain_text"])
        print(f"\n✅ 마스터 DB에서 {len(existing_source_ids)}개의 기존 항목을 확인했습니다.")
    except Exception as e:
        print(f"❌ 마스터 DB 조회 중 오류 발생: {e}")
        return

    # --- 단계 2: 각 소스 DB를 순회하며 데이터 동기화 ---
    for db_id in SOURCE_DB_IDS:
        print(f"\n🔄 소스 DB ({db_id[:6]}...) 처리 중...")
        try:
            source_pages = notion.databases.query(database_id=db_id).get("results")
            print(f"  - {len(source_pages)}개의 항목을 찾았습니다.")

            for page in source_pages:
                page_id = page["id"]

                if page_id in existing_source_ids:
                    continue

                # --- 단계 3: 새 항목을 마스터 DB에 생성 (이미지 기준 속성 매핑) ---
                props = page.get("properties", {})

                # 각 속성 값을 안전하게 가져오기
                # ⚠️ 첫 번째 '제목' 속성의 실제 이름이 '이름'이 맞는지 확인해주세요!
                title_prop = props.get("Issue", {}).get("title", [])
                title_content = title_prop[0].get("text", {}).get("content", "제목 없음") if title_prop else "제목 없음"

                # 나머지 속성들
                phase_prop = props.get("Phase", {}).get("select", [])
                title_prop = props.get("Project_Title",{}).get("rich_text", [])
                milestone_prop = props.get("Milestone", {}).get("multi_select", [])
                issue_type_prop = props.get("Issue_Type", {}).get("multi_select", [])
                firstwriter_prop = props.get("First_Writer", {}).get("rich_text", [])
                help_needed_prop = props.get("Help_Needed", {}).get("rich_text", [])
                issue_status_prop = props.get("Issue_Status", {}).get("select") # select는 기본값 None
                severity_prop = props.get("Severity", {}).get("select")
                due_prop = props.get("Due", {}).get("date")
                eta_prop = props.get("ETA", {}).get("date")
                pm_check_prop = props.get("PM_Check", {}).get("checkbox", False)


                new_page_properties = {
                    "Issue": {"title": [{"text": {"content": title_content}}]},
                    "Project_Title": {"rich_text": title_prop},
                    "Phase": {"select": phase_prop},
                    "Milestone": {"multi_select": milestone_prop},
                    "Issue_Type": {"multi_select": issue_type_prop},
                    "First_Writer": {"rich_text": firstwriter_prop},
                    "Help_Needed": {"rich_text": help_needed_prop},
                    "Issue_Status": {"select": issue_status_prop},
                    "Severity": {"select": severity_prop},
                    "Due": {"date": due_prop},
                    "ETA": {"date": eta_prop},
                    "PM_Check": {"checkbox": pm_check_prop}
                    #"Source_ID": {"rich_text": [{"text": {"content": page_id}}]} # 중복 방지용
                }

                # 빈 값(None)인 속성은 API 요청에서 제외 (오류 방지)
                new_page_properties = {k: v for k, v in new_page_properties.items() if v.get(list(v.keys())[0]) is not None}


                notion.pages.create(
                    parent={"database_id": MASTER_DB_ID},
                    properties=new_page_properties
                )
                print(f"  ➕ 새 항목 추가: {title_content}")

        except Exception as e:
            import traceback
            print(f"❌ 소스 DB ({db_id[:6]}...) 처리 중 오류 발생: {e}")
            traceback.print_exc()

    print("\n🎉 모든 데이터베이스 동기화가 완료되었습니다!")

# 6. 함수 실행
sync_databases()

